import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loader import dp
from utils.db_api.schemas.user import Task
from states import AddTask
from aiogram_calendar import SimpleCalendar, simple_cal_callback as cal_callback
import aiogram.utils.markdown as fmt
from loader import db
import datetime


@dp.message_handler(Command('add'), state="*")
async def cmd_add(message: types.Message):
    await message.answer(f"{fmt.hbold('[1/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
                         f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–µ (2-3 —Å–ª–æ–≤–∞).\n"
                         f"–û–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ —Å—É—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.\n\n"
                         f"{fmt.hbold('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ üëá')}")
    await AddTask.waiting_for_name.set()
    logging.warning(
        f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ /add X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã name | {message.chat.id} {message.from_user.id} {message.from_user.full_name} {message.from_user.username} {message.from_user.url} {message.text}')



@dp.message_handler(state=AddTask.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"{fmt.hbold('[2/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
                         f"{fmt.hbold('–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ üëá')}")
    await AddTask.next()
    logging.warning(
        f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã description | {message.chat.id} {message.from_user.id} {message.from_user.full_name} {message.from_user.username} {message.from_user.url} {message.text}')


@dp.message_handler(state=AddTask.waiting_for_description, content_types=types.ContentTypes.TEXT)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(f"{fmt.hbold('[3/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
                         f"{fmt.hbold('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ üëá')}")
    await AddTask.next()
    logging.warning(
        f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã responsible | {message.chat.id} {message.from_user.id} {message.from_user.full_name} {message.from_user.username} {message.from_user.url} {message.text}')


@dp.message_handler(state=AddTask.waiting_for_responsible, content_types=types.ContentTypes.TEXT)
async def process_responsible(message: types.Message, state: FSMContext):
    await state.update_data(responsible=message.text)
    await message.answer(f"{fmt.hbold('[4/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
                         f"{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ üëá')}",
                         reply_markup=await SimpleCalendar().start_calendar())
    await AddTask.next()
    logging.warning(
        f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è deadline | {message.chat.id} {message.from_user.id} {message.from_user.full_name} {message.from_user.username} {message.from_user.url} {message.text}')


@dp.callback_query_handler(cal_callback.filter(), state=AddTask.waiting_for_deadline)
async def process_deadline(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)

    if selected:
        date = date.date()
        today = datetime.date.today()

        if date < today:
            await callback_query.message.edit_text(
                f"{fmt.hbold('[4/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
                f"{fmt.hbold('–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ üëá')}",
                reply_markup=await SimpleCalendar().start_calendar())
            logging.warning(
                f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è deadline | {callback_query.message.chat.id} {callback_query.from_user.id} {callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data} ')
            return

        await state.update_data(deadline=date)
        await callback_query.message.edit_text(
            f"{fmt.hbold('[4/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
            f"{fmt.hbold('–í–∞—à –≤—ã–±–æ—Ä:')} {date}"
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("–î–µ–Ω—å –≤ –¥–µ–Ω—å", callback_data="notify_same_day"))

        delta_days = (date - today).days
        if delta_days >= 3:
            keyboard.add(InlineKeyboardButton("–ó–∞ 3 –¥–Ω—è", callback_data="notify_3_days"))
        if delta_days >= 7:
            keyboard.add(InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="notify_week"))
        keyboard.add(InlineKeyboardButton("–í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É", callback_data="notify_specific_date"))

        await callback_query.message.answer(
            f"{fmt.hbold('[5/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
            f"{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üëá')}",
            reply_markup=keyboard
        )
        await AddTask.next()
        logging.warning(
            f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É —É—Å–ø–µ—à–Ω–æ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã notification | {callback_query.message.chat.id} {callback_query.from_user.id} {callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data} ')


@dp.callback_query_handler(state=AddTask.waiting_for_notification)
async def process_notification(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    deadline = user_data['deadline']
    notification_date = None
    notification_text = ""

    if callback_query.data == "notify_same_day":
        notification_date = deadline
        notification_text = "–¥–µ–Ω—å –≤ –¥–µ–Ω—å"
        await save_task_and_finish(callback_query, state, notification_date)

    elif callback_query.data == "notify_3_days":
        notification_date = deadline - datetime.timedelta(days=3)
        notification_text = "–∑–∞ 3 –¥–Ω—è"
        await save_task_and_finish(callback_query, state, notification_date)

    elif callback_query.data == "notify_week":
        notification_date = deadline - datetime.timedelta(days=7)
        notification_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        await save_task_and_finish(callback_query, state, notification_date)

    elif callback_query.data == "notify_specific_date":
        await callback_query.message.answer(f"{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üëá')}",
                                            reply_markup=await SimpleCalendar().start_calendar())
        notification_text = "–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"
        await AddTask.waiting_for_specific_notification.set()

    await callback_query.message.edit_text(
        f"{fmt.hbold('[5/5] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')}\n\n"
        f"{fmt.hbold('–í–∞—à –≤—ã–±–æ—Ä:')} {notification_text}"
    )
    logging.warning(
        f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É —É—Å–ø–µ—à–Ω–æ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è notification | {callback_query.message.chat.id} {callback_query.from_user.id} {callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_query.data} ')



@dp.callback_query_handler(cal_callback.filter(), state=AddTask.waiting_for_specific_notification)
async def process_specific_notification_date(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    today = datetime.date.today()

    if selected:
        date = date.date()  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É date
        if date < today:
            await callback_query.message.edit_text(
                f"{fmt.hbold('–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ üëá')}",
                reply_markup=await SimpleCalendar().start_calendar()
            )
            logging.warning(
                f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è notification | {callback_query.message.chat.id} {callback_query.from_user.id} '
                f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data} ')
            return
        user_data = await state.get_data()
        deadline = user_data['deadline']
        if date > deadline:
            await callback_query.message.edit_text(
                f"{fmt.hbold('–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ üëá')}",
                reply_markup=await SimpleCalendar().start_calendar()
            )
            logging.warning(
                f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∑–∂–µ –¥–µ–¥–ª–∞–π–Ω–∞ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è notification | {callback_query.message.chat.id} {callback_query.from_user.id} '
                f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data} ')
            return
        await save_task_and_finish(callback_query, state, date)


async def save_task_and_finish(callback_query, state, notification_date):
    user_data = await state.get_data()
    task = await Task.create(
        chat_id=callback_query.message.chat.id,
        created_by=callback_query.from_user.id,
        name=user_data['name'],
        description=user_data['description'],
        deadline=user_data['deadline'],
        responsible=user_data['responsible'],
        notification_date=notification_date
    )

    await callback_query.message.answer(
        f"{fmt.hbold('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ü§ù')}\n\n"
        f"{fmt.hbold('üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ')}{user_data['name']}\n"
        f"{fmt.hbold('üìå –û–ø–∏—Å–∞–Ω–∏–µ: ')}{user_data['description']}\n"
        f"{fmt.hbold('üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ')}{user_data['responsible']}\n\n"
        f"{fmt.hbold('üìÖ –°—Ä–æ–∫ —Ä–µ—à–µ–Ω–∏—è: ')}{user_data['deadline']}\n"
        f"{fmt.hbold('üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ')}{notification_date}"
    )
    await state.finish()

    logging.warning(
        f'–°–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É X –ö–æ–Ω–µ—Ü /add | {callback_query.message.chat.id} {callback_query.from_user.id} {callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_query.data} ')
    return

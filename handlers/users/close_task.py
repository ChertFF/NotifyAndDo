import logging

from aiogram import types
from aiogram.dispatcher import FSMContext

from loader import dp
from utils.db_api.schemas.user import Task
from states import CloseTask
from loader import db
import aiogram.utils.markdown as fmt


@dp.callback_query_handler(state=CloseTask.waiting_for_task_number)
async def process_task_number(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data)
    tasks = await Task.query.where(Task.id == task_id).gino.first()

    await callback_query.message.edit_text(
        f"{fmt.hbold('üìù –í–∞—à –≤—ã–±–æ—Ä:')} {tasks.name}\n"
        f"{fmt.hbold('üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')} {tasks.description}\n"
        f"{fmt.hbold('üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:')} {tasks.responsible}\n"
        f"{fmt.hbold('‚è≥ –°—Ä–æ–∫ —Ä–µ—à–µ–Ω–∏—è:')} {tasks.deadline}\n"
    )

    await state.update_data(task_id=tasks.id)
    await callback_query.message.answer(f"{fmt.hbold('–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤) üëá')}")
    logging.warning(
        f'–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É {task_id} X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö | {callback_query.message.chat.id} {callback_query.from_user.id} '
        f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {task_id} ')
    await CloseTask.next()


@dp.message_handler(state=CloseTask.waiting_for_closing_details, content_types=types.ContentTypes.TEXT)
async def process_closing_details(message: types.Message, state: FSMContext):
    details = message.text

    if len(details) <= 10:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùå")
        return

    user_data = await state.get_data()
    task = await Task.get(user_data['task_id'])
    await task.update(status='–ó–∞–≤–µ—Ä—à–µ–Ω–∞', closed_at=db.func.now(), closed_by=message.from_user.id, decision_by_close= details).apply()

    await message.answer(f"–ó–∞–¥–∞—á–∞ {task.name} –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
    await state.finish()
    logging.warning(
        f'–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ X –ö–æ–Ω–µ—Ü /admin | {message.chat.id} {message.from_user.id} '
        f'{message.from_user.full_name} {message.from_user.username} {message.from_user.url} {details}')
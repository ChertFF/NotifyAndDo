import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram_calendar import SimpleCalendar, simple_cal_callback as cal_callback
import aiogram.utils.markdown as fmt
import datetime

from data.config import LIMIT_TASK
from loader import dp
from utils.db_api.db_gino import db
from utils.db_api.schemas.user import Task
from states import ManageTask, CloseTask
from filters import AdminOrPrivateFilter
from math import ceil


@dp.message_handler(Command('admin'), state="*")
async def cmd_admin(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="edit_task"),
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data="return_task"),
        InlineKeyboardButton(text="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="duplicate_task"),
        InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", callback_data="close_task")
    )
    await message.answer(f"–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:\n\n"
                         f"üìù {fmt.hbold('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É')} - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–ª—è \"–ù–∞–∑–≤–∞–Ω–∏–µ\", \"–û–ø–∏—Å–∞–Ω–∏–µ\", \"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π\", \"–°—Ä–æ–∫ —Ä–µ—à–µ–Ω–∏—è\", \"–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\" \n\n"
                         f"üîç {fmt.hbold('–í–µ—Ä–Ω—É—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É')} - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ \n\n"
                         f"üîÑ {fmt.hbold('–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É')} - —Å–æ–∑–¥–∞—Å—Ç –¥—É–±–ª–∏–∫–∞—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏, —Ç–æ–ª—å–∫–æ —Å –¥—Ä—É–≥–æ–π –¥–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –¥–∞—Ç–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è \n\n",
                         reply_markup=keyboard)
    await ManageTask.waiting_for_action.set()
    logging.warning(
        f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ /admin | {message.chat.id} {message.from_user.id} {message.from_user.full_name} {message.from_user.username}  {message.from_user.url}')


@dp.callback_query_handler(state=ManageTask.waiting_for_action)
async def process_action(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data
    await state.update_data(action=action)
    await state.update_data(page=0)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await display_tasks(callback_query, state)



async def display_tasks(callback_query, state):
    data = await state.get_data()
    chat_id = callback_query.message.chat.id
    action = data.get('action')
    page = data.get('page', 0)
    counter_select_pages = data.get('count', 0)
    await state.update_data({'page': page})
    count_tasks = await db.select([db.func.count()]).where(Task.chat_id == chat_id).gino.scalar()

  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    tasks = []

    fields_mapping = {
        "edit_task": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É üìù",
        "duplicate_task": "–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É üîÑ",
        "return_task": "–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ üîç",
        "close_task": "–∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É üîç"
    }

    field_name = fields_mapping.get(action)

    if counter_select_pages == 0:
        await callback_query.message.edit_text(f"{fmt.hbold('–í–∞—à –≤—ã–±–æ—Ä:')} {field_name}\n")


    if action == "edit_task":
        tasks = await Task.query.where(Task.status != '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').where(
            Task.chat_id == callback_query.message.chat.id).order_by(Task.deadline.asc()).offset(
            page * LIMIT_TASK).gino.all()
    elif action == "duplicate_task":
        tasks = await Task.query.where(Task.status != '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').where(
            Task.chat_id == callback_query.message.chat.id).order_by(Task.deadline.asc()).offset(
            page * LIMIT_TASK).gino.all()
    elif action == "return_task":
        tasks = await Task.query.where(Task.status == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').where(
            Task.chat_id == callback_query.message.chat.id).order_by(Task.closed_at.desc()).offset(
            page * LIMIT_TASK).gino.all()
    elif action == "close_task":
        tasks = await Task.query.where(Task.status != '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').where(
            Task.chat_id == callback_query.message.chat.id).order_by(Task.closed_at.desc()).offset(
            page * LIMIT_TASK).gino.all()

    if not tasks:
        await callback_query.message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        await state.finish()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∑–∞–¥–∞—á –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = 0
    nubmer_index = page * LIMIT_TASK
    end_index = LIMIT_TASK
    print(end_index)
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    tasks_on_page = tasks[start_index:end_index]

    tasks_text = "\n".join([f"‚Ññ{i + 1 + nubmer_index}. {fmt.hbold(task.name)}\n üìÖ {task.deadline}\n üìå {task.description}\n " for i, task in
                            enumerate(tasks_on_page)])
    tasks_header = f'{fmt.hbold("üîª –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üîª")}\n\n'

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    keyboard = InlineKeyboardMarkup(row_width=5)
    for i, task in enumerate(tasks_on_page, start=start_index):
        keyboard.insert(InlineKeyboardButton(text=str(i + 1 + nubmer_index), callback_data=str(task.id)))

    print(len(tasks))
    print(f'–¥–ª–∏–Ω–∞ —Ç–∞–∫—Å–∞')
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    if page > 0:
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="previous_page"))
    if count_tasks > (page + 1) * LIMIT_TASK:
        keyboard.add(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_page"))

    if counter_select_pages != 0:
        await callback_query.message.edit_text(f"{tasks_header}{tasks_text}\n{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É üëá')}", reply_markup=keyboard)
    elif counter_select_pages == 0:
        await callback_query.message.answer(f"{tasks_header}{tasks_text}\n{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É üëá')}", reply_markup=keyboard)

    if action in ["edit_task", "duplicate_task"]:
        await ManageTask.waiting_for_task_selection.set()
    elif action == "return_task":
        await ManageTask.waiting_for_task_number.set()
    elif action == "close_task":
        await CloseTask.waiting_for_task_number.set()

    logging.warning(
        f'–í—ã–±—Ä–∞–ª –ø—É–Ω–∫—Ç {action} –≤ /admin | {callback_query.message.chat.id} {callback_query.from_user.id} '
        f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {action} ')


@dp.callback_query_handler(lambda c: c.data in ["previous_page", "next_page"], state=[ManageTask.waiting_for_task_selection, ManageTask.waiting_for_task_number])
async def change_page(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = data.get('page', 0)
    counter_select_pages = data.get('count', 0)

    if callback_query.data == "previous_page":
        page = max(0, page - 1)
    elif callback_query.data == "next_page":
        await state.update_data({'count': counter_select_pages+1})
        page = page + 1

    await state.update_data({'page': page})
    await display_tasks(callback_query, state)


@dp.callback_query_handler(state=ManageTask.waiting_for_task_selection)
async def process_task_selection(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data)
    tasks = await Task.query.where(Task.id == task_id).gino.first()
    print(tasks)

    await callback_query.message.edit_text(
        f"{fmt.hbold('üìù –ó–∞–¥–∞—á–∞:')} {tasks.name}\n"
        f"{fmt.hbold('üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')} {tasks.description}\n"
        f"{fmt.hbold('üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:')} {tasks.responsible}\n"
        f"{fmt.hbold('‚è≥ –°—Ä–æ–∫ —Ä–µ—à–µ–Ω–∏—è:')} {tasks.deadline}\n"
        f"{fmt.hbold('üîî –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:')} {tasks.notification_date}\n"
    )

    await state.update_data(task_id=tasks.id)
    action = (await state.get_data()).get('action')
    if action == 'edit_task':
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="name"),
            InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="description"),
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", callback_data="responsible"),
            InlineKeyboardButton(text="–î–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="deadline"),
            InlineKeyboardButton(text="", callback_data="notification_date")
        )
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
        await ManageTask.waiting_for_field_selection.set()

    elif action == 'duplicate_task':
        task = tasks
        new_task = await Task.create(
            chat_id=task.chat_id,
            created_by=task.created_by,
            name=task.name,
            description=task.description,
            deadline=task.deadline,  # –ú—ã –æ–±–Ω–æ–≤–∏–º —ç—Ç–æ –ø–æ–ª–µ –ø–æ–∑–∂–µ
            responsible=task.responsible,
            notification_date=task.notification_date,  # –ú—ã –æ–±–Ω–æ–≤–∏–º —ç—Ç–æ –ø–æ–ª–µ –ø–æ–∑–∂–µ
            status='–ù–æ–≤–∞—è'
        )
        await state.update_data(new_task_id=new_task.id)
        await callback_query.message.answer(
            f"{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ üëá')}\n\n",
            reply_markup=await SimpleCalendar().start_calendar()
        )
        await ManageTask.waiting_for_date.set()


@dp.callback_query_handler(state=ManageTask.waiting_for_task_number)
async def process_task_number(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data)
    task = await Task.query.where(Task.id == task_id).gino.first()

    await task.update(status='–ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏').apply()
    await callback_query.message.edit_text(f"–ó–∞–¥–∞—á–∞ {task.name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É üóø")
    await state.finish()
    logging.warning(
        f'–í–µ—Ä–Ω—É–ª –∑–∞–¥–∞—á—É {task_id} –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ  | {callback_query.message.chat.id} {callback_query.from_user.id} '
        f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {task_id} ')


@dp.callback_query_handler(state=ManageTask.waiting_for_field_selection)
async def process_field_selection(callback_query: types.CallbackQuery, state: FSMContext):
    field = callback_query.data
    await state.update_data(field=field)
    user_data = await state.get_data()
    task_id = user_data.get('task_id')
    task = await Task.get(task_id)
    today = datetime.date.today()

    fields_mapping = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "responsible": "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ",
        "deadline": "–¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
    }

    field_name = fields_mapping.get(callback_query.data)
    if field_name:
        await callback_query.message.edit_text(
            f"{fmt.hbold('–í–∞—à –≤—ã–±–æ—Ä:')} –∏–∑–º–µ–Ω–∏—Ç—å {field_name}")
        logging.warning(
            f'–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–µ {field_name} –≤ –∑–∞–¥–∞—á–µ {task_id} X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö | {callback_query.message.chat.id} {callback_query.from_user.id} '
            f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url}')

    if field in ["deadline"]:
        await callback_query.message.answer(
            f"{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏üëá')}\n\n",
            reply_markup=await SimpleCalendar().start_calendar()
        )
        await ManageTask.waiting_for_date.set()

    else:
        await callback_query.message.answer(f"{fmt.hbold('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üëá')}")
        await ManageTask.waiting_for_new_value.set()


@dp.message_handler(state=ManageTask.waiting_for_new_value, content_types=types.ContentTypes.TEXT)
async def process_new_value(message: types.Message, state: FSMContext):
    new_value = message.text
    user_data = await state.get_data()
    task_id = user_data.get('task_id')
    action = user_data.get('action')
    field = user_data.get('field')

    if action == 'edit_task' and task_id:
        task = await Task.get(task_id)
        update_data = {field: new_value}
        await task.update(**update_data).apply()
        await message.answer(f"–ó–∞–¥–∞—á–∞ {task.name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")
        await state.finish()

    logging.warning(
        f'–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–µ {field} –≤ –∑–∞–¥–∞—á–µ {task_id} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ {new_value} X –ö–æ–Ω–µ—Ü /admin | {message.chat.id} {message.from_user.id} '
        f'{message.from_user.full_name} {message.from_user.username} {message.from_user.url} {task_id} {field} {new_value}')


@dp.callback_query_handler(cal_callback.filter(), state=ManageTask.waiting_for_date)
async def process_date_selection(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)

    if selected:
        date = date.date()
        today = datetime.date.today()

        if date < today:
            await callback_query.message.edit_text(
                f"{fmt.hbold('[1/2] –í—ã–±–æ—Ä –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')}\n\n"
                f"{fmt.hbold('–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ üëá')}",
                reply_markup=await SimpleCalendar().start_calendar()
            )
            logging.warning(
                f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è deadline X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö | {callback_query.message.chat.id} {callback_query.from_user.id} '
                f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data}')
            return

        await state.update_data(deadline=date)
        await callback_query.message.edit_text(
            f"{fmt.hbold('[1/2] –í—ã–±–æ—Ä –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')}\n\n"
            f"{fmt.hbold('–í–∞—à –≤—ã–±–æ—Ä:')} {date}"
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("–î–µ–Ω—å –≤ –¥–µ–Ω—å", callback_data="notify_same_day"))
        delta_days = (date - today).days
        if delta_days >= 3:
            keyboard.add(InlineKeyboardButton("–ó–∞ 3 –¥–Ω—è", callback_data="notify_3_days"))
        if delta_days >= 7:
            keyboard.add(InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="notify_week"))
        keyboard.add(InlineKeyboardButton("–í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É", callback_data="notify_specific_date"))

        await callback_query.message.answer(
            f"{fmt.hbold('[2/2] –í—ã–±–æ—Ä –¥–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')}\n\n"
            f"{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üëá')}",
            reply_markup=keyboard
        )
        await ManageTask.waiting_for_notification_choice.set()
        logging.warning(
            f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É —É—Å–ø–µ—à–Ω–æ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã notification | {callback_query.message.chat.id} {callback_query.from_user.id} '
            f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data}')


@dp.callback_query_handler(state=ManageTask.waiting_for_notification_choice)
async def process_notification(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    deadline = user_data['deadline']
    notification_date = None
    notification_text = ""

    if callback_query.data == "notify_same_day":
        notification_date = deadline
        notification_text = "–¥–µ–Ω—å –≤ –¥–µ–Ω—å"
        await save_task_and_finish(callback_query, state, notification_date)

    elif callback_query.data == "notify_3_days":
        notification_date = deadline - datetime.timedelta(days=3)
        notification_text = "–∑–∞ 3 –¥–Ω—è"
        await save_task_and_finish(callback_query, state, notification_date)

    elif callback_query.data == "notify_week":
        notification_date = deadline - datetime.timedelta(days=7)
        notification_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        await save_task_and_finish(callback_query, state, notification_date)

    elif callback_query.data == "notify_specific_date":
        await callback_query.message.answer(f"{fmt.hbold('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üëá')}",
                                            reply_markup=await SimpleCalendar().start_calendar())
        notification_text = "–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"
        await ManageTask.waiting_for_specific_notification.set()

    await callback_query.message.edit_text(
        f"{fmt.hbold('[2/2] –í—ã–±–æ—Ä –¥–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')}\n\n"
        f"{fmt.hbold('–í–∞—à –≤—ã–±–æ—Ä:')} {notification_text}"
    )

    logging.warning(
        f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É —É—Å–ø–µ—à–Ω–æ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è notification | {callback_query.message.chat.id} {callback_query.from_user.id} '
        f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data}')


@dp.callback_query_handler(cal_callback.filter(), state=ManageTask.waiting_for_specific_notification)
async def process_specific_notification_date(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    today = datetime.date.today()

    if selected:
        date = date.date()  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É date
        if date < today:
            await callback_query.message.edit_text(
                f"{fmt.hbold('–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ üëá')}",
                reply_markup=await SimpleCalendar().start_calendar()
            )
            logging.warning(
                f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è notification | {callback_query.message.chat.id} {callback_query.from_user.id} '
                f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data} ')
            return

        user_data = await state.get_data()
        deadline = user_data['deadline']
        if date > deadline:
            await callback_query.message.edit_text(
                f"{fmt.hbold('–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ üëá')}",
                reply_markup=await SimpleCalendar().start_calendar()
            )
            logging.warning(
                f'–í—ã–±—Ä–∞–ª –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∑–∂–µ –¥–µ–¥–ª–∞–π–Ω–∞ X –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è notification | {callback_query.message.chat.id} {callback_query.from_user.id} '
                f'{callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_data} ')
            return

        await save_task_and_finish(callback_query, state, date)


async def save_task_and_finish(callback_query, state, notification_date):
    user_data = await state.get_data()
    task_id = user_data.get('task_id')
    task = await Task.get(task_id)
    deadline = user_data['deadline']
    action = user_data['action']

    fields_mapping = {
        "edit_task": "–æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        "duplicate_task": "–ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞"
    }

    field_name = fields_mapping.get(action)

    await task.update(deadline=user_data['deadline']).apply()
    await task.update(notification_date=notification_date).apply()

    msg = f'–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ {field_name} ü§ù'
    await callback_query.message.answer(
        f"{fmt.hbold(msg)}\n\n"
        # f"{fmt.hbold('üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ')}{user_data['name']}\n"
        # f"{fmt.hbold('üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ')}{user_data['description']}\n"
        # f"{fmt.hbold('üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ')}{user_data['responsible']}\n"
        f"{fmt.hbold('üìÖ –°—Ä–æ–∫ —Ä–µ—à–µ–Ω–∏—è: ')}{user_data['deadline']}\n"
        f"{fmt.hbold('üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ')}{notification_date}"
    )
    await state.finish()
    logging.warning(
        f'–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ {field_name} X –ö–æ–Ω–µ—Ü /add | {callback_query.message.chat.id} {callback_query.from_user.id} {callback_query.from_user.full_name} {callback_query.from_user.username} {callback_query.from_user.url} {callback_query.data} ')

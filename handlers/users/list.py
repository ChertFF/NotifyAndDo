import logging
from time import strftime, gmtime

from aiogram import types
from loader import dp, bot
from utils.db_api.quick_commands import get_task_data
from datetime import datetime, date, timedelta
import openpyxl
from openpyxl.styles import Font, Alignment
import aiogram.utils.markdown as fmt

LIMIT_TASK = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞


@dp.message_handler(commands=['list'], state="*")
async def cmd_list(message: types.Message):
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    all_tasks = await get_task_data(chat_id)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ LIMIT_TASK
    new_tasks = [task for task in all_tasks if task['–°—Ç–∞—Ç—É—Å'] == '–ù–æ–≤–∞—è'][:LIMIT_TASK]
    clarification_tasks = [task for task in all_tasks if task['–°—Ç–∞—Ç—É—Å'] == '–ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏'][:LIMIT_TASK]

    # –î–ª—è closed_tasks –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ updated_at
    closed_tasks = sorted(
        [task for task in all_tasks if task['–°—Ç–∞—Ç—É—Å'] == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'],
        key=lambda task: task['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'],
        reverse = True
    )[:LIMIT_TASK]

    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    wb = openpyxl.Workbook()
    ws = wb.active
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    header_font = Font(name='Arial', size=12, bold=True)
    cell_font = Font(name='Arial', size=11)
    cell_alignment = Alignment(wrap_text=False)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    headers = [
        "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–°–æ–∑–¥–∞–ª", "–°–æ–∑–¥–∞–ª (username)", "–°–æ–∑–¥–∞–ª (fullname)", "–°–æ–∑–¥–∞–ª (url)",
        "–°—Ä–æ–∫", "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–°—Ç–∞—Ç—É—Å", "–†–µ—à–µ–Ω–∏–µ", "–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è",
        "–ó–∞–∫—Ä—ã–ª", "–ó–∞–∫—Ä—ã–ª (username)", "–ó–∞–∫—Ä—ã–ª (fullname)", "–ó–∞–∫—Ä—ã–ª (url)"
    ]
    ws.append(headers)
    for col in ws.iter_cols(min_row=1, max_row=1, min_col=1, max_col=len(headers)):
        for cell in col:
            cell.font = header_font
            cell.alignment = cell_alignment

    # –î–∞–Ω–Ω—ã–µ
    for task in all_tasks:
        row = [
            task["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].replace(tzinfo=None) if task["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"] else None,
            task["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"].replace(tzinfo=None) if task["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] else None,
            task["–°–æ–∑–¥–∞–ª"], task["–°–æ–∑–¥–∞–ª (username)"], task["–°–æ–∑–¥–∞–ª (fullname)"], task["–°–æ–∑–¥–∞–ª (url)"],
            task["–°—Ä–æ–∫"],
            task["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"], task["–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"], task["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"], task["–°—Ç–∞—Ç—É—Å"],
            task["–†–µ—à–µ–Ω–∏–µ"],
            task["–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"].replace(tzinfo=None) if task["–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"] else None,
            task["–ó–∞–∫—Ä—ã–ª"], task["–ó–∞–∫—Ä—ã–ª (username)"], task["–ó–∞–∫—Ä—ã–ª (fullname)"], task["–ó–∞–∫—Ä—ã–ª (url)"]
        ]
        ws.append(row)
        for col in ws.iter_cols(min_row=ws.max_row, max_row=ws.max_row, min_col=1, max_col=len(headers)):
            for cell in col:
                cell.font = cell_font
                cell.alignment = cell_alignment

    # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(cell.value)
            except:
                pass
        adjusted_width = (max_length + 2) * 1.4
        ws.column_dimensions[column].width = adjusted_width

    # –°–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã C, F, N –∏ Q
    hidden_columns = ['C', 'F', 'N', 'Q']
    for col in hidden_columns:
        ws.column_dimensions[col].hidden = True

    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
    for cell in ws[1]:
        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

    time = strftime("%m.%d.%Y_%H.%M.%S", gmtime())
    filename = f'out/task_data_{time}.xlsx'
    wb.save(filename)


    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().date()

    # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    overdue_tasks_count = sum(1 for task in all_tasks if task["–°—Ä–æ–∫"] < current_date)

    # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
    close_deadline_tasks_count = sum(1 for task in all_tasks if task["–°—Ä–æ–∫"] - current_date <= timedelta(days=7)) - overdue_tasks_count

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"{fmt.hbold('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')}\n\n" \
                   f"{fmt.hbold('üìç –ù–æ–≤—ã–µ:')}\n{format_tasks_list(new_tasks)}\n\n" \
                   f"{fmt.hbold('üîô –ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏:')}\n{format_tasks_list(clarification_tasks)}\n\n" \
                   f"{fmt.hbold('üè∑ –ó–∞–∫—Ä—ã—Ç—ã–µ: ')}\n{format_tasks_list(closed_tasks)}\n\n" \
                   f"{fmt.hbold('–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:')} {overdue_tasks_count}\n" \
                   f"{fmt.hbold('–ë–ª–∏–∑–∫–∏ –∫ –¥–µ–¥–ª–∞–π–Ω—É:')} {close_deadline_tasks_count}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ Excel —Ñ–∞–π–ª
    await bot.send_document(chat_id, types.InputFile(filename), caption=message_text)

    logging.warning(
        f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ /list | {message.chat.id} {message.from_user.id} {message.from_user.full_name} {message.from_user.username}  {message.from_user.url}')

def format_tasks_list(tasks):
    if tasks:
        formatted_tasks = []
        for task in tasks:
            emoji = get_task_emoji(task)
            formatted_tasks.append(f"{emoji} {task['–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏']} - {task['–°—Ä–æ–∫'].strftime('%Y-%m-%d')}")
        return "\n".join(formatted_tasks)
    else:
        return f"{fmt.hstrikethrough('–ù–µ—Ç –∑–∞–¥–∞—á')}"

def get_task_emoji(task):
    if task["–°—Ç–∞—Ç—É—Å"] == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞':
        if task["–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"] and task["–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"].date() <= task["–°—Ä–æ–∫"]:
            return '‚úÖ'  # –ó–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞
        else:
            return '‚ùå'  # –ö—Ä–∞—Å–Ω–∞—è –≥–∞–ª–æ—á–∫–∞
    else:
        now = date.today()
        if task["–°—Ä–æ–∫"] >= now:
            return 'üîò'  # –ó–µ–ª–µ–Ω–∞—è —Ç–æ—á–∫–∞
        else:
            return '‚ùå'  # –ö—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞